welcome: "Welcome to Calculator!"
valid_num: "Invalid option. Enter a valid number."
valid_operator: "Invalid option."
operator_text: "Enter the operator: +, -, *, or /"
num1_text: "Enter a number"
num2_text: "Enter the second number."
again: "Would you like to go again?"
bye: "Goodbye"
# Your calculator program is a hit, and it's being used all over the world! Problem is, not everyone speaks English. You need to now internationalize the messages in your calculator. You've already done the hard work of extracting all the messages to a configuration file. Now, all you have to do is send that configuration file to translators and call the right translation in your code.

# Possible Solution
# First, we'll have to reorganize our yml configuration a little bit to account for different languages. We'll nest the message keys under a top-level language, thereby organizing all the values. Here's an example:

# # reorganizing the calculator_messages.yml

# en:
#   welcome: "Welcome to Calculator! Enter your name:"
#   valid_name: "Make sure to enter a valid name."
# es:
#   welcome: "Bienvenido a la calculadora! Entre su nombre:"
#   valid_name: "Asegúrese de entrar un nombre válido."
# Note that we're using two top-level keys here to distinguish between English messages and Spanish messages. We could have as many top-level keys as we want to -- one for each language our program supports.

# Next, we have to study how this change affects our MESSAGES hash. If we do a puts MESSAGES.inspect in our program, we'll see that it's still a hash, except it's now a nested hash. This means we have to grab the language first, then the message. For example, we can get the Spanish welcome message like this:

# MESSAGES['es']['welcome']    # => Bienvenido a la calculadora! Entre su nombre:
# Because we'll need the language key every time we reference the message, let's move that to a method we can call. That way, we can pass in the language to the method, which can then reference the MESSAGES hash.

# calculator.rb
# # at top of file after initializing MESSAGES

# def messages(message, lang='en')
#   MESSAGES[lang][message]
# end
# This now means we can do this in our program:

# # english
# prompt(messages('welcome'))       # => Welcome to Calculator! Enter your name:

# # english
# prompt(messages('welcome', 'en')) # => Welcome to Calculator! Enter your name:

# # spanish
# prompt(messages('welcome', 'es')) # => Bienvenido a la calculadora! Entre su nombre:
# The last piece is setting a default language for your program.

# Copy Code
# # top of calculator.rb

# LANGUAGE = 'en'
# And finally, whenever you call the prompt, you can do this:

# Copy Code
# prompt(messages('welcome', LANGUAGE))
# If you think that's too verbose, you could move the code around a bit and modify the prompt method:

# def prompt(key)
#   message = messages(key, LANGUAGE)   # make sure the "messages" method is declared above this line
#   Kernel.puts("=> #{message}")
# end

# # now you can just do:
# prompt('welcome')
# Now, when non-English users want to use your calculator, all they have to do is change the LANGUAGE setting, provided you have translated the messages for them already.
